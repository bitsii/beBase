simple performance check - run cycle with a stopwatch:

win
powershell measure-command { start-process scripts\cyclejv5.bat -Wait }
powershell measure-command { start-process scripts\cyclemcs5.bat -Wait }
powershell measure-command { start-process scripts\cyclecsc5.bat -Wait }

nix

time scripts/cyclejv5.sh
time scripts/cyclemcs5.sh

Times

Dell E6430 Win7 on power jv javac vsoff notaskman
  2015-12-25 - 48.766
  2016-08-30 - 46.791 46.446 post direct int compare 46.181 mutint in arrayiter 44.872 post rm unneeded vint/array/float members
  2016-08-31 - 43.723 post direct int setvalue addvalue skipnew0
Dell E6430 Win7 on power cs mcs vsoff notaskman
  2015-12-25 - 26.264
  2016-08-30 - 26.780 25.213 post direct int compare 24.747 mutint in arrayiter 24.078 post rm unneeded vint/array/float members
  2016-08-31 - 23.705 post direct int setvalue addvalue skipnew0
Dell E6430 Win7 on power cs csc vsoff notaskman
  2015-12-25 - 27.617

Build stuff (typical box, vson)
mcs 4from5
Parse 2.5
Load syn 3.5
Save syn 1.5
All parse emit 10
Just emit 2.5

savings with lib
3.5 vs 2.5 + 2.5 = 5, so 1.5
(/9.5 = 1/5th)
if did custom emit/load would save 1 on use (so 2.5 saved), lose 1 on save 

