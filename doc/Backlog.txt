
var to any
  
gratuitous returns - just change semantics
  explicit any, void - see that works, yell at any non-void returns for void (return(), return(void))
  default void for no specification, fixup problems
  
reintroduce proxy
  only for a typed call on a class with a particular method where method is unknown
___________________

js all in page coding
  gens and evals in context (app is built (with build) syns are present, gen and eval code- new lib each time hit go (counter in name?) old code stays
  
for callfromoper cases, if there is a "equalsName" method (for any call which was from oper) and arg is same type as caller call that instead
  do for string equals, notEquals, add, addValue, 

gratuitous returns
  actually stop doing returns for void and reuse the called
  (except for untyped and js, which still return self - tho js could skip assign)
  
for untyped vars, calls known to object are made as typed calls
direct accessors

string swapValue, cache the hash value??

all in browser option (load for base, etc) (?precomp base? ?base comp?)
  just a big page with local refs
faster dev - node

and or for && ||
.not as a member on bool (as well as method)
  
proper perf test suite
no final test version of cycle for times 
once many noop like new_0
work out changing var names to avoid extra assign for obj new, int new, etc
  no declare too

exception line matching should be a between, not exact match (see which is exact for inclusion)
  sort, search

javascript has the lib on it literally in the macro
  
embed ondemand
golang?

bool default type, is a true and a false (only the true is true)

libs
all in mem parse/output for js
use profiler to see where time is spent

=~ for setvalue
a =~ b += c; (=~ actually first/lowest priority)

why does something = bool expr; not work?

fixed kw - like local for now, means descendants can't break contract for accessors, new, create, default

finally

mutating size for map, etc, ++= everywhere

go to int and other reuse in code as much as possible
  just look at be code efficiency (base et all)
  look at build efficiency

in browser code to run
  build read from strings not just files
  for js output to string too (no files)
  run in page
  node repl too
and a shell

doc it up

convenience syntax for array, map construction

more ex app

need to have nested exceptions (and output the nest on print) - just "linked list" of exceptions with pointers

switch string to mutating for everything (swap, etc)

___________________

 also, for many calls can avoid the call even if not literals (int add, sub, etc)
 in some cases (no escape (local vars, not called out except to "safe" mtds))
   could do native ints, bools, same with local/final int/bool members
final for static members (?) - readonly for c#
     onceDeced it's ok, not for not once deced (need to distinguish)
get rid of calls to once and many

direct member get/set where possible (typed, final or local w/o override), keep gen accessors

named, optional parameters, ? parameter lists (or just very convenient array/map construct)

libraries and linking
library/library version
tests sep from base lib (2 bld with libs)

---- bugs ----
default return not picking up when wrong type
return in loop seen as last return incorrectly (what if no loop...)
last call is return not working for all cases - when the last return is inside a conditional, need to check for closing }
something is wrong with classname get (for jv at least) - visiterror had it (adding " " to it, npe)
castTo is wrong in at least some once cases, checkTypes must be wrong somehow
byteiterator is much much slower than just doing getInt on a string by length, something is wrong there
// Bug with initial elseIf
// math with parens inside a method call is broken
// this doesn't work for (Int j = 0;j < dnumargs && j < maxDynArgs;j=j++) {
// numargs - maxDynArgs + 1 !== (numargs - maxDynArgs) + 1
// if undef(self[n]) doesn't seem to work (at least in List)
// this includes negative values for indexes
// test once assign with not combination
string hash for javascript seems to be different than for others

field prefix to var dec makes it a field

for native langs (esp js) generate stubs with "literal names" - ?vars, def methods, autoconvert strings, etc

classNameSerializationIterator (same treatment as classNameIterator)

safe navigation (null check then call, "?.")
safe equal check (?==) (not null and equals) (check just the called on?)
  
can, createInstance and invoke - switch to structures which don't depend on underlying reflection
cs and jv like js for createInstance, can like invoke
switch can to be like invoke and to have a genned method, this has been thought of elsewhere (do it for all langs)
  
readline find \n and just substring -1 if last is \r
    
make it possible to skip calls and link up assignments betw org and final
tmp var reduction
 direct use of onces, no tmp var assign (will then have mechanism to suppress existence
 of tmp vars, unnecessary assignments/use other variables, alias)
 extend call et all to get the info through ("skip"))
 skip unneeded temp/assigns
 drop tmp vars for simple calls, chain where possible?
 reuse tmps if same type and only used once
  
type inference - "auto"
javascript webworker concurrency, same model for cs/jv
  inbox or queue?

date strings

FASTER if closelib and isFinal or isLocal and call is empty skip it altogether (create, once, many, etc)

functional:
first class functions - alwaysForward for all dynamic calls always forwarding (the way to use functions)
distinguish getting a function from doing a accessor (have a call, also have something other for shortcut, maybe ".."
anonymous functions? closures? (case inside (no), capture everything used and make them all args/held state (yes))
switch invoke over?

version interfaces (things which can span lib vers if needed)
(minor only tracked in documentation terms?)

Separate capacity set and len set (support shrink) have put unchecked

  serialization string utf fix (? to from HEX?)
    strings already to/from int at position
    ?int to from hex string, handle sizing (two position)
    ultimately, string to from hex string
    hex the string at the serialization level, not in string (to catch other cases)

dump { } ( ) where unneeded

---- no lang change req / additive ----
for typed vars, if they support forward could allow for calls they don't know about (and start them out "forwardcally") (now they fail)
make js and others same behaviour
add notEmpty to containers
decide on mutating or not len for string et all and do it (thinking do)
encode/decode base 64 to use instead of hex
http://en.wikibooks.org/wiki/Algorithm_Implementation/Miscellaneous/Base64

log - level for class, config based (optional), time stamp (optional)
see how typescript and dart translate into js
  example programs, compile to js, look at them
  https://developers.google.com/closure/compiler/
  (or don't)

clocker iterator, share lock with clocker

for build to be threadsafe,
   nodes and syns needs threadsafe fixes

utf8 in code (vars, classes, methods), encoding for < > ascii
  http://www.cprogramming.com/tutorial/unicode.html

info for embedders - main needs to run before start, outer thread should hold lock
  on lib

more concurrency
  semaphore
  queue
  worker threads
  futures (promises)
  atomic int ops
 .. means to back to last target (can be explicit or return from a . call)

programattic access to compiler (incl after a base tree is loaded), mostly for
 testing invalid code cases, maybe for other things too

closure? callback? lamda?
callback/event, mtd, concurrency

https://github.com/int6/uhttpsharp c# embedded ws
http://forums.dotnetfoundation.org/t/net-core-running-asp-net-app-through-apache-tomcat-etc/1129/2
http://stackoverflow.com/questions/26260728/kestrel-hosting-basics

args to if must be boolean if they are typed

get test testMisc working for js
-js needs to check types on assign Look for formCast/checkTypes, need to rearrange call assign stuff a bit
-check assigns
-js on typed calls check during arg build, untyped calls have a descriptor obj genned which is checked

method alias - for typed, all references replaced with the other name, for dynamic, that name also calls the alias method (just like the real one...), only one instance of method, no double calls

packaging, node.js packaging is great (npm install ...) mavenish

lang-notes:

js:
http://jsperf.com/object-create-vs-crockford-vs-jorge-vs-constructor/10
http://ejohn.org/apps/learn/#64

perf
THE NEXT LINE IS THE JS SPEEDUP ONE!!! (prototype actually looks to be fastest...)
http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/
http://stackoverflow.com/questions/3493252/javascript-prototype-operator-performance-saves-memory-but-is-it-faster

back strings with regular js List type of js integers (unsigned 8bit) for now.
Converting from this to js string:  http://stackoverflow.com/questions/14028148/convert-integer-array-to-string-at-javascript
https://stackoverflow.com/questions/2647867/how-to-determine-if-variable-is-undefined-or-null
More complete stack traces (opera, ie): http://www.eriwen.com/javascript/js-stack-trace/

later(sooner?) support js typed arrays conditionally (should be much faster/better)

end lang-notes:

int 32bit (c int, int32_t), float 32bit (c float), add long 64 (c long long) and double 64 (c double) (after conversion?)

allow signatures to mark arguments as safe - as not incorporated into members, not mutated, not passed along

in practice now, int is 32, long varies long long is 64
float is 32, double is 64
unicode is max 4 bytes, fits in 32bit int
have unsigned int value, for java, postive part of 64bit (long) - better because does not depend on
signed implementation being something in particular (2s complement) for byte manipulation
shiftLeft, shiftRight, shiftRightLogical

recursive file - dir delete

need more tests for time and interval

map-like get put on obj could use accessors to get/put, index too (using prop iter)

have a convention (?based on namepath) to allow direct use of emit lang as if it was native be code

with mutable literals convention is for the mutator to assure safety of references by copying them, assuming that unknown code may depend on the value not changing

support stream parsing along side string parsing for xml, json

support for getting all method and/or member names
-need to have a way to get all methods (iterator?)
have a class which finds all descendents of a particular class and then runs them if they support the desired method (main args params)
-will have to have a way of getting all descendents of a class

nice ideas:
hibernate/resume for programs
upgrade without restart

utf8
link for escape/unescape source
http://www.cprogramming.com/tutorial/unicode.html
a table with lots
http://www.utf8-chartable.de/
online encoder
http://www.htmlescape.net/stringescape_tool.html

have a descendent of Assertions which has a main which runs all methods which begin with (or end with) "t(T)est"

no arg and single arg calls (at least) w/out parens (return...)
anon methods, become instances of system-method and can only be used/referenced via assignment (when genning them,
 have a different prefix for function - and they are not in any vtables, call maps, etc (they're unnamed as such, only referencable
 via variables)

smart, oldfart, ideas http://scottlocklin.wordpress.com/2013/07/28/ruins-of-forgotten-empires-apl-languages/

use private to mean a class which is only visible in it's own library
(none of it's interface/syn goes to deploy)

think about how to support binary serialization

multi value return

arbitrary precision arithmetic
btrees, binary search trees

method invocations which are final for object should be handled in a final way for untyped vars as for typed vars

support "and" and "or" along side && and || (just like you can do "not" as .not())
? for handle nulls gracefully (no iter) ?

closures using instances (auto-prefix)

// each/multiassign/return...

generics (generic type) (functionality covers interfaces, generics, mixins)

through incorporation
calls on it like dynamic calls, goes to incorporated type
check that calls of generic satisfied by incorporated type at compile time
whether or not a type supports an generic is determined by if it is ever initialized for that generic (constructed for it...)
generic indistinguishable from regular types during calls, etc (source wise, emitted code different for calls), only at declaration and construction is it different

DoIt<T>(T held) DoIt {

   return(self);

   doIt() {
      held.doIt();
   }
}

DoIt d = DoIt<AType>(at); //at is of type AType

d.doIt(); //doIt called on held inst (interface case)
